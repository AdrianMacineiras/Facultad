<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="gl"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>IteradorRebote.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">JaCoCoverage analysis of project &quot;DS-43-05-B2&quot; (powered by JaCoCo from EclEmma)</a> &gt; <a href="index.source.html" class="el_package">ejercicio3</a> &gt; <span class="el_source">IteradorRebote.java</span></div><h1>IteradorRebote.java</h1><pre class="source lang-java linenums">package ejercicio3;

import java.util.List;
import java.util.Iterator;

public class IteradorRebote&lt;E&gt; implements Iterator&lt;E&gt; {
    private final List&lt;E&gt; listaIterada;
    private boolean borrar, hacia_atras;
    private int puntero;
    
<span class="fc" id="L11">    public IteradorRebote(List&lt;E&gt; lista){</span>
<span class="fc" id="L12">        this.listaIterada = lista;</span>
<span class="fc" id="L13">        this.borrar = false;</span>
<span class="fc" id="L14">        this.hacia_atras = false;</span>
<span class="fc" id="L15">        this.puntero = -1;</span>
<span class="fc" id="L16">    }</span>
    
    @Override
    public boolean hasNext() {
<span class="fc bfc" id="L20" title="All 2 branches covered.">        return this.listaIterada.size()&gt;1;</span>
    }

    @Override
    public E next() {
        E participante;
<span class="fc bfc" id="L26" title="All 2 branches covered.">        if (!this.hacia_atras) {</span>
<span class="fc" id="L27">           this.puntero++;</span>
<span class="fc bfc" id="L28" title="All 2 branches covered.">           if (this.puntero==this.listaIterada.size()-1) this.hacia_atras=true;</span>
        }
        else{
<span class="fc" id="L31">           puntero--;</span>
<span class="fc bfc" id="L32" title="All 2 branches covered.">           if (puntero==0) hacia_atras=false;</span>
        }
<span class="fc" id="L34">    participante = this.listaIterada.get(this.puntero);</span>
<span class="fc" id="L35">    this.borrar = true;</span>
<span class="fc" id="L36">    return participante;</span>
    }

    @Override
    public void remove() {
<span class="fc bfc" id="L41" title="All 2 branches covered.">        if (this.borrar) {</span>
<span class="fc" id="L42">            this.borrar = false;</span>
<span class="fc" id="L43">            this.listaIterada.remove(this.puntero);</span>
<span class="fc bfc" id="L44" title="All 2 branches covered.">            if (!this.hacia_atras) puntero--;</span>
<span class="fc bfc" id="L45" title="All 2 branches covered.">            if (this.puntero==0) hacia_atras = false;</span>
        } else {
<span class="fc" id="L47">            throw new IllegalStateException();</span>
        }
<span class="fc" id="L49">    }</span>

    
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>